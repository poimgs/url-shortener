name: Deploy

on:
  push:
    branches: [main, develop]

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Determine environment
        id: env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "terraform_workspace=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "terraform_workspace=staging" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build API
        run: npm run build --workspace=apps/api

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: url-shortener-${{ steps.env.outputs.environment }}-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -f apps/api/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Workspace
        working-directory: infra
        run: |
          terraform workspace select ${{ steps.env.outputs.terraform_workspace }} || terraform workspace new ${{ steps.env.outputs.terraform_workspace }}

      - name: Terraform Plan
        working-directory: infra
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repository: ${{ github.repository }}
        run: terraform plan -no-color

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_github_repository: ${{ github.repository }}
        run: terraform apply -auto-approve -no-color

      - name: Get App Runner Service URL
        id: app-runner
        working-directory: infra
        run: |
          SERVICE_URL=$(terraform output -raw app_runner_service_url)
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Run Database Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npm run db:migrate --workspace=packages/db

      - name: Deploy Frontend to Amplify
        env:
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          BRANCH_NAME: ${{ steps.env.outputs.environment == 'production' && 'main' || 'develop' }}
        run: |
          aws amplify start-job \
            --app-id $AMPLIFY_APP_ID \
            --branch-name $BRANCH_NAME \
            --job-type RELEASE

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "Environment: ${{ steps.env.outputs.environment }}"
          echo "API URL: ${{ steps.app-runner.outputs.service_url }}"
          echo "Frontend: Check Amplify console for deployment status"